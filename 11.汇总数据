//2021年2月26日22点33分

-- TABLE products:
+---------+---------+----------------+------------+----------------------------------------------------------------+
| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |
+---------+---------+----------------+------------+----------------------------------------------------------------+
| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |
| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |
| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |
| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |
| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |
| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |
| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |
| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |
| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |
| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |
| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |
| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |
| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |
| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |
+---------+---------+----------------+------------+----------------------------------------------------------------+

-- TABLE customers:
+---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+
| cust_id | cust_name      | cust_address        | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email          |
+---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+
|   10001 | Coyote Inc.    | 200 Maple Lane      | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com     |
|   10002 | Mouse House    | 333 Fromage Lane    | Columbus  | OH         | 43333    | USA          | Jerry Mouse  | NULL                |
|   10003 | Wascals        | 1 Sunny Place       | Muncie    | IN         | 42222    | USA          | Jim Jones    | rabbit@wascally.com |
|   10004 | Yosemite Place | 829 Riverside Drive | Phoenix   | AZ         | 88888    | USA          | Y Sam        | sam@yosemite.com    |
|   10005 | E Fudd         | 4545 53rd Street    | Chicago   | IL         | 54545    | USA          | E Fudd       | NULL                |
+---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+

-- TABLE orderitems:
+-----------+------------+---------+----------+------------+
| order_num | order_item | prod_id | quantity | item_price |
+-----------+------------+---------+----------+------------+
|     20005 |          1 | ANV01   |       10 |       5.99 |
|     20005 |          2 | ANV02   |        3 |       9.99 |
|     20005 |          3 | TNT2    |        5 |      10.00 |
|     20005 |          4 | FB      |        1 |      10.00 |
|     20006 |          1 | JP2000  |        1 |      55.00 |
|     20007 |          1 | TNT2    |      100 |      10.00 |
|     20008 |          1 | FC      |       50 |       2.50 |
|     20009 |          1 | FB      |        1 |      10.00 |
|     20009 |          2 | OL1     |        1 |       8.99 |
|     20009 |          3 | SLING   |        1 |       4.49 |
|     20009 |          4 | ANV03   |        1 |      14.99 |
+-----------+------------+---------+----------+------------+

-----------------------------------------------------------------------------------------

-- 聚集函数（运行在组上，计算和返回单个值的函数）
AVG()       ： 返回某列的平均值
COUNT()     ： 返回某列的行数 
MAX()       ： 返回某列的最大值
MIN()       ： 返回某列的最小值
SUM()       ： 返回某列值之和

-----------------------------------------------------------------------------------------

-- AVG()函数
mysql> SELECT AVG(prod_price) AS avg_price 
       FROM products;                       -- products表中所有产品的平均价格
+-----------+
| avg_price |
+-----------+
| 16.133571 |
+-----------+

mysql> SELECT AVG(prod_price) AS avg_price 
       FROM products 
       WHERE vend_id = 1003;                -- 供应商1003的所有产品的平均值
+-----------+
| avg_price |
+-----------+
| 13.212857 |
+-----------+

-- AVG()函数会忽略列值为NULL的行

-----------------------------------------------------------------------------------------

-- COUNT()函数
mysql> SELECT COUNT(*) AS num_cust 
       FROM customers;                      -- 返回customers表中客户的总数
+----------+
| num_cust |
+----------+
|        5 |
+----------+

mysql> SELECT COUNT(cust_email) AS num_cust 
       FROM customers;                      -- 只对具有电子邮件地址的客户计数
+----------+
| num_cust |
+----------+
|        3 |
+----------+

-- 如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号（*），则不忽略

-----------------------------------------------------------------------------------------

-- MAX()函数
mysql> SELECT MAX(prod_price) AS max_price 
       FROM products;
+-----------+
| max_price |
+-----------+
|     55.00 |
+-----------+

-- MAX()在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行
-- MAX()函数忽略列值为NULL的行

-----------------------------------------------------------------------------------------

-- MIN()函数
mysql> SELECT MIN(prod_price) AS min_price 
       FROM products;
+-----------+
| min_price |
+-----------+
|      2.50 |
+-----------+

-- MIN()在用于文本数据时，如果数据按相应的列排序，则MAX()返回最前面的行
-- MIN()函数忽略列值为NULL的行

-----------------------------------------------------------------------------------------

-- SUM()函数
mysql> SELECT SUM(quantity) AS item_ordered 
       FROM orderitems 
       WHERE order_num = 20005;
+--------------+
| item_ordered |
+--------------+
|           19 |
+--------------+

mysql> SELECT SUM(item_price*quantity) AS total_price 
       FROM orderitems 
       WHERE order_num = 20005;                         -- 合计每项物品的item_price*quantity，得出总的订单金额
+-------------+
| total_price |
+-------------+
|      149.87 |
+-------------+

-- SUM()函数忽略列值为NULL的行

-----------------------------------------------------------------------------------------

-- 聚集不同值（聚集函数的DISTINCT的使用）
mysql> SELECT AVG(DISTINCT prod_price) AS avg_price 
       FROM products 
       WHERE vend_id = 1003;                            -- 返回供应商1003提供的产品的平均价格，因为使用了DISTINCT参数，因此平均值只考虑各个不同的价格
+-----------+
| avg_price |
+-----------+
| 15.998000 |
+-----------+

-- 对所有的行执行计算，指定ALL参数或不给参数（ALL是默认行为）
-- 只包含不同的值，指定DISTINCT参数

-----------------------------------------------------------------------------------------

-- 组合聚集函数
mysql> SELECT COUNT(*) AS num_items, 
              MIN(prod_price) AS price_min, 
              MAX(prod_price) AS price_max, 
              AVG(prod_price) AS price_avg 
       FROM products;
+-----------+-----------+-----------+-----------+
| num_items | price_min | price_max | price_avg |
+-----------+-----------+-----------+-----------+
|        14 |      2.50 |     55.00 | 16.133571 |
+-----------+-----------+-----------+-----------+
